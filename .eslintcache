[{"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\BillGroup\\BillGroup.js":"1","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Home\\Home.js":"2","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\UserList.js":"3","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\App.js":"4","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Login\\LogoutButton.js":"5","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\reportWebVitals.js":"6","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\InviteUser.js":"7","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\http-common.js":"8","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\services\\bill.service.js":"9","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AddGroup.js":"10","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AddBill.js":"11","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AllBills.js":"12","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\OwedAmount.js":"13","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Profile.js":"14","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\services\\group.service.js":"15","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Home\\GroupCard.js":"16","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Login\\Login.js":"17","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\index.js":"18"},{"size":9511,"mtime":1611359012004,"results":"19","hashOfConfig":"20"},{"size":2300,"mtime":1612150085661,"results":"21","hashOfConfig":"20"},{"size":488,"mtime":1609192491737,"results":"22","hashOfConfig":"20"},{"size":905,"mtime":1612149023433,"results":"23","hashOfConfig":"20"},{"size":620,"mtime":1610732035515,"results":"24","hashOfConfig":"20"},{"size":375,"mtime":1609192491741,"results":"25","hashOfConfig":"20"},{"size":2012,"mtime":1610753781050,"results":"26","hashOfConfig":"20"},{"size":262,"mtime":1612144425070,"results":"27","hashOfConfig":"20"},{"size":492,"mtime":1609801882981,"results":"28","hashOfConfig":"20"},{"size":1544,"mtime":1612148070549,"results":"29","hashOfConfig":"20"},{"size":2799,"mtime":1610749545637,"results":"30","hashOfConfig":"20"},{"size":460,"mtime":1610732778323,"results":"31","hashOfConfig":"20"},{"size":827,"mtime":1610732859478,"results":"32","hashOfConfig":"20"},{"size":752,"mtime":1610737429341,"results":"33","hashOfConfig":"20"},{"size":479,"mtime":1610825496525,"results":"34","hashOfConfig":"20"},{"size":599,"mtime":1611359322296,"results":"35","hashOfConfig":"20"},{"size":3573,"mtime":1611081122333,"results":"36","hashOfConfig":"20"},{"size":599,"mtime":1612149030018,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"1wb295t",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\BillGroup\\BillGroup.js",["85","86"],"import React from 'react';\r\nimport AddBill from '../AddBill';\r\nimport OwedAmount from '../OwedAmount';\r\nimport AllBills from '../AllBills';\r\nimport Profile from '../Profile';\r\nimport InviteUser from '../InviteUser';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport BillDataService from \"../../services/bill.service.js\";\r\nimport GroupDataService from \"../../services/group.service.js\";\r\nimport icon from \"../../assets/Divy Up.png\";\r\n\r\nimport './BillGroup.scss';\r\n\r\nexport class BillGroup extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\tselectedUsers : [],\r\n\t\t\t\t\t\t\t\t\t\tcardImg : null,\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\tthis.handleAdd = this.handleAdd.bind(this);\r\n\t\tthis.handleUserSelect = this.handleUserSelect.bind(this);\r\n\t\tthis.getOwedBills = this.getOwedBills.bind(this);\r\n\t\tthis.getTotalOwed = this.getTotalOwed.bind(this);\r\n\t\tthis.handleSelectAll = this.handleSelectAll.bind(this);\r\n\t\tthis.handleSplitType = this.handleSplitType.bind(this);\r\n\t\tthis.handleInviteUser = this.handleInviteUser.bind(this);\r\n\t\tthis.handleFileUpload = this.handleFileUpload.bind(this);\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tthis.getOwedBills();\r\n\t\tthis.getUserList();\r\n\t}\r\n\r\n\tgetOwedBills() {\r\n\r\n\t\tlet body = {\r\n\t\t\temail: this.props.user.profile.email,\r\n\t\t\tgroupName: this.props.match.params.groupName,\r\n\t\t}\r\n\t\tBillDataService.getAll(body).then(response => {\r\n\t\t\tthis.setState({ owedBills : response.data}, function() { this.getTotalOwed()});\r\n\t\t})\r\n\r\n\t}\r\n\r\n\r\n\tcalculateTotalOwedBills(bill, totalOwedBills, type) {\r\n\t\tlet billForUser = (type === 'covered') ? bill.billFrom : bill.billTo;\r\n\t\tlet billToUser = (type === 'covered') ? bill.billTo : bill.billFrom;\r\n\r\n\t\t// Check if the user has already been added\r\n\t\tif(!totalOwedBills.hasOwnProperty(billForUser)) {\r\n\t\t\tlet typeMap = new Map();\r\n\r\n\t\t\ttypeMap.set(billToUser, parseInt(bill.billAmount));\r\n\t\t\tlet user = {};\r\n\t\t\tuser[type] = typeMap;\r\n\t\t\ttotalOwedBills[billForUser] = user;\r\n\t\t} else {\r\n\t\t\t// Check if a type (covered, owes) map already exists\r\n\t\t\tif(totalOwedBills[billForUser].hasOwnProperty(type)) {\r\n\t\t\t\tlet typeMap = totalOwedBills[billForUser][type];\r\n\t\t\t\t// Check if covered person is already added\r\n\t\t\t\tif(!typeMap.has(billToUser)) {\r\n\t\t\t\t\ttypeMap.set(billToUser, parseInt(bill.billAmount));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet amount = typeMap.get(billToUser);\r\n\t\t\t\t\tamount += parseInt(bill.billAmount);\r\n\t\t\t\t\ttypeMap.set(billToUser, amount);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// No type (covered, owes) map exists\r\n\t\t\t\tlet user = totalOwedBills[billForUser];\r\n\t\t\t\t// Check if a owes map exists so it doesn't get overwritten\r\n\t\t\t\tlet otherType = (type === 'covered') ? 'owes' : 'covered';\r\n\t\t\t\t// Other type of map already exists, calculate difference\r\n\t\t\t\tif(totalOwedBills[billForUser].hasOwnProperty(otherType)) {\r\n\t\t\t\t\tlet otherTypeMap = totalOwedBills[billForUser][otherType];\r\n\t\t\t\t\tif(otherTypeMap.has(billToUser)) {\r\n\t\t\t\t\t\tlet otherAmount = otherTypeMap.get(billToUser);\r\n\r\n\t\t\t\t\t\tif(otherAmount - bill.billAmount > 0) {\r\n\t\t\t\t\t\t\totherTypeMap.set(billToUser, otherAmount - bill.billAmount);\r\n\t\t\t\t\t\t} else if(otherAmount - bill.billAmount < 0) {\r\n\t\t\t\t\t\t\tlet typeMap = new Map();\r\n\r\n\t\t\t\t\t\t\ttypeMap.set(billToUser, parseInt(bill.billAmount) - otherAmount);\r\n\t\t\t\t\t\t\tuser[type] = typeMap;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\totherTypeMap.delete(billToUser);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// User has otherType map but doesn't include billToUser so new type map created\r\n\t\t\t\t\t\tlet typeMap = new Map();\r\n\r\n\t\t\t\t\t\ttypeMap.set(billToUser, parseInt(bill.billAmount));\r\n\r\n\t\t\t\t\t\tlet user = totalOwedBills[billForUser];\r\n\t\t\t\t\t\tuser[type] = typeMap;\r\n\t\t\t\t\t\ttotalOwedBills[billForUser] = user;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// User is completely new\r\n\t\t\t\t\tlet typeMap = new Map();\r\n\r\n\t\t\t\t\ttypeMap.set(billToUser, parseInt(bill.billAmount));\r\n\r\n\t\t\t\t\tlet user = {};\r\n\t\t\t\t\tuser[type] = typeMap;\r\n\t\t\t\t\ttotalOwedBills[billForUser] = user;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetTotalOwed() {\r\n\t\tlet allBills = this.state.owedBills;\r\n\t\tlet totalOwedBills = {};\r\n\t\tallBills.forEach(bill => {\r\n\t\t\t// Check owed amounts for logged in user only\r\n\t\t\tif(this.props.user.profile.email === bill.billFrom) {\r\n\t\t\t\tthis.calculateTotalOwedBills(bill, totalOwedBills, 'covered');\r\n\t\t\t}\r\n\t\t\tif(this.props.user.profile.email === bill.billTo) {\r\n\t\t\t\tthis.calculateTotalOwedBills(bill, totalOwedBills, 'owes');\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.setState({ totalOwedBills : totalOwedBills});\r\n\t}\r\n\r\n\tasync getUserList() {\r\n\r\n\t\tlet body = {\r\n\t\t\t_partition: \"Group\",\r\n\t\t\tgroupName: this.props.match.params.groupName,\r\n\t\t};\r\n\t\tGroupDataService.findUserList(body).then(response => {\r\n\t\t\tthis.setState({ allUsers : response.data[0].participants, selectUserList: response.data[0].participants});\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tasync insertBills(newBills) {\r\n\t\ttry {\r\n\r\n\t\t\tBillDataService.insert(newBills);\r\n\t\t\t\r\n\t\t} catch(error) {\r\n\t\t\tconsole.log(error);\r\n\t\t}\r\n\t}\r\n\r\n\thandleAdd() {\r\n\t\t// Prevent the page from refreshing\r\n\t\t// event.preventDefault();\r\n\t\tlet billName = document.getElementById(\"billName\").value;\r\n\t\tlet billAmt = parseInt(document.getElementById(\"billAmt\").value);\r\n\t\tlet billedTo = this.state.selectedUsers;\r\n\t\tlet splitType = document.getElementById(\"splitType\").value;\r\n\r\n\t\tlet user = this.props.user;\r\n\r\n\t\t// Change bill amount depending on split type\r\n\t\tif(splitType === \"Split Bill Amount\") {\r\n\t\t\tif(billedTo.includes(user.profile.email)) {\r\n\t\t\t\tbillAmt = billAmt / billedTo.length;\r\n\t\t\t\tbilledTo = billedTo.filter(user => user !== this.props.user.profile.email);\r\n\t\t\t} else {\r\n\t\t\t\tbillAmt = billAmt / billedTo.length;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet newBills = [];\r\n\t\tlet owedBills = this.state.owedBills;\r\n\t\tlet totalOwedBills = this.state.totalOwedBills;\r\n\t\tfor(let i = 0; i < billedTo.length; i++) {\r\n\t\t\tlet bill = {\r\n\t\t\t\t\t\t\t\t\t\tbillFromId : user.id,\r\n\t\t\t\t\t\t\t\t\t\tbillName : billName,\r\n\t\t\t\t\t\t\t\t\t\tbillTo : billedTo[i],\r\n\t\t\t\t\t\t\t\t\t\tbillFrom : this.props.user.profile.email,\r\n\t\t\t\t\t\t\t\t\t\tbillAmount : billAmt.toFixed(2),\r\n\t\t\t\t\t\t\t\t\t\tgroupName : this.props.match.params.groupName,\r\n\t\t\t\t\t\t\t\t\t\t_partition: 'Bill'\r\n\t\t\t\t\t\t\t\t\t};\r\n\r\n\t\t\tthis.calculateTotalOwedBills(bill, totalOwedBills, 'covered');\r\n\r\n\t\t\tnewBills.push(bill);\r\n\t\t\towedBills.push(bill);\r\n\t\t}\r\n\r\n\t\tthis.insertBills(newBills);\r\n\t\tthis.setState({owedBills : owedBills, totalOwedBills : totalOwedBills});\r\n\r\n\t\tdocument.getElementById(\"add-bill\").reset();\r\n\t\tthis.setState({selectedUsers : []});\r\n\t}\r\n\r\n\thandleUserSelect(event) {\r\n\t\tconst selectedUsers = this.state.selectedUsers;\r\n\t\tlet index;\r\n\r\n\t\tif(event.target.checked) {\r\n\t\t\tselectedUsers.push(event.target.value);\r\n\t\t} else {\r\n\t\t\tindex = selectedUsers.indexOf(event.target.value);\r\n\t\t\tselectedUsers.splice(index, 1);\r\n\t\t}\r\n\r\n\t\tthis.setState({selectedUsers: selectedUsers});\r\n\t}\r\n\r\n\thandleSelectAll() {\r\n\t\tlet selectedUsers = this.state.selectedUsers;\r\n\t\tlet users = this.state.selectUserList;\r\n\t\tif(users.length === selectedUsers.length) {\r\n\t\t\tselectedUsers = [];\r\n\t\t} else {\r\n\t\t\tusers.filter(user => !selectedUsers.includes(user)).map((user) => selectedUsers.push(user));\r\n\t\t}\r\n\r\n\t\tthis.setState({selectedUsers: selectedUsers});\r\n\t}\r\n\r\n\thandleSplitType() {\r\n\t\tlet splitType = document.getElementById(\"splitType\").value;\r\n\t\tlet user = this.props.user;\r\n\t\tlet email = user.profile ?  user.profile.email : \"\";\r\n\r\n\t\tif(splitType === \"Charge Each Amount\") {\r\n\t\t\tlet users = this.state.selectUserList;\r\n\t\t\tusers = users.filter(user => user !== email);\r\n\t\t\tthis.setState({ selectUserList : users});\r\n\t\t} else {\r\n\t\t\tlet selectUserList = this.state.allUsers;\r\n\t\t\tthis.setState({ selectUserList : selectUserList});\r\n\t\t}\r\n\t}\r\n\r\n\thandleInviteUser() {\r\n\t\tlet allUsers = this.state.allUsers;\r\n\t\tlet email = document.getElementById(\"email\").value;\r\n\r\n\t\tif(!allUsers.includes(email)) {\r\n\t\t\tallUsers.push(email);\r\n\r\n\t\t\tlet body = {\r\n\t\t\t\tgroupName: this.props.match.params.groupName,\r\n\t\t\t\tparticipants : allUsers\r\n\t\t\t}\r\n\t\t\tGroupDataService.update(body);\r\n\r\n\t\t\tthis.setState({allUsers: allUsers});\r\n\r\n\t\t\tdocument.getElementById(\"emailForm\").reset();\r\n\t\t}\r\n\t}\r\n\r\n\thandleFileUpload = event => {\r\n\t\tlet file = event.target.files[0];\r\n\r\n\t\tconst formData = new FormData();\r\n\t\tformData.append('img', file);\r\n\t\tformData.append('groupName', this.props.match.params.groupName);\r\n\t\tGroupDataService.upload(formData);\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\t\treturn (\r\n\t\t\t\t<Container fluid>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col md=\"auto\"><img className=\"icon\" src={icon}/></Col>\r\n\t\t\t\t\t\t<Col className = \"groupNameContainer\">\r\n\t\t\t\t\t\t\t<InviteUser groupName={this.props.match.params.groupName} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleInviteUser={this.handleInviteUser}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleFileUpload={this.handleFileUpload}   />\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t<Col md=\"auto\"><Profile /></Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<AddBill \thandleAdd={this.handleAdd} \r\n\t\t\t\t\t\t\t\t\t\t \tusers={this.state.selectUserList ? this.state.selectUserList : []} \r\n\t\t\t\t\t\t\t\t\t\t \tcurrentUser={this.props.user.profile ? this.props.user.profile.email : ''}\r\n\t\t\t\t\t\t\t\t\t\t \tselectedUsers={this.state.selectedUsers}\r\n\t\t\t\t\t\t\t\t\t\t \thandleUserSelect={this.handleUserSelect}\r\n\t\t\t\t\t\t\t\t\t\t \thandleSelectAll={this.handleSelectAll}\r\n\t\t\t\t\t\t\t\t\t\t \thandleSplitType={this.handleSplitType}/>\r\n\t\t\t\t\t\t<AllBills className = \"col-sm-6\"\r\n\t\t\t\t\t\t\t\t\t\t\t\towedBills={this.state.owedBills} />\r\n\t\t\t\t\t\t<OwedAmount className = \"col-sm-3\"\r\n\t\t\t\t\t\t\t\t\t\t\ttotalOwedBills = {this.state.totalOwedBills || {}}\r\n\t\t\t\t\t\t\t\t\t\t\tuser = {this.props.user.profile.email || {}} />\r\n\t\t\t\t\t</Row>\r\n\r\n\t\t\t\t</Container>\r\n\t\t\t);\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nexport default withRouter(BillGroup);","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Home\\Home.js",["87"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\UserList.js",[],["88","89"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\App.js",[],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Login\\LogoutButton.js",[],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\reportWebVitals.js",[],["90","91"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\InviteUser.js",[],["92","93"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\http-common.js",[],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\services\\bill.service.js",[],["94","95"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AddGroup.js",[],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AddBill.js",[],["96","97"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\AllBills.js",[],["98","99"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\OwedAmount.js",[],["100","101"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Profile.js",[],["102","103"],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\services\\group.service.js",[],"C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Home\\GroupCard.js",["104"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Card } from 'react-bootstrap';\r\n\r\nimport defaultImg from \"../../assets/RR.JPG\";\r\n\r\nexport default function GroupCard({ group }) {\r\n\r\n  const img = group.img ? group.img : defaultImg;\r\n\r\n  return (\r\n  \t<Link to={`/${group.groupName}`}>\r\n  \t\t<Card className=\"groupCard\" >\r\n  \t\t\t<Card.Img className=\"groupImage\" src={img} alt=\"Card image\" />\r\n  \t\t\t<Card.ImgOverlay>\r\n\t  \t\t\t<Card.Body>\r\n\t  \t\t\t\t<Card.Title>{group.groupName}</Card.Title>\r\n\t  \t\t\t</Card.Body>\r\n\t  \t\t</Card.ImgOverlay>\r\n  \t\t</Card>\r\n  \t</Link>\r\n  );\r\n};","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\components\\Login\\Login.js",["105"],"import React from \"react\";\r\nimport * as Realm from \"realm-web\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Container, Row, Col, Button, Form } from 'react-bootstrap';\r\nimport { Formik} from 'formik';\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nimport '../BillGroup/BillGroup.scss';\r\nimport icon from \"../../assets/Divy Up.png\";\r\n\r\nexport default function Login({ setUser }) {\r\n\tconst REALM_APP_ID = \"billsplit-enxhm\"; // e.g. myapp-abcde\r\n\tconst app = new Realm.App({ id: REALM_APP_ID });\r\n\tconst history = useHistory();\r\n\r\n  function AttemptLogin(setUser) {\r\n\t\tlet email = document.getElementById('email').value;\r\n\t\tlet password = document.getElementById('password').value;\r\n\t\t\r\n\t\tloginEmailPassword(email, password).then(user => {\r\n\t\t\thistory.push(\"/\");\r\n\t\t})\r\n\r\n\t}\r\n\r\n\tasync function loginEmailPassword(email, password) {\r\n\t\tconst credentials = Realm.Credentials.emailPassword(email, password);\r\n\t\ttry {\r\n\t\t\t//Authenticate the user\r\n\t\t\tconst user = await app.logIn(credentials);\r\n\t\t\tsetUser(user);\r\n\t\t\treturn user;\r\n\t\t} catch(err) {\r\n\t\t\tconsole.error(\"Failed log in\", err);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction keyPress(e) {\r\n\t\tif(e.keyCode === 13) {\r\n\t\t\tAttemptLogin(setUser);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function SignUp() {\r\n\t\tlet email = document.getElementById('email').value;\r\n\t\tlet password = document.getElementById('password').value;\r\n\r\n\t\tawait app.emailPasswordAuth.registerUser(email, password);\r\n\t}\r\n\r\n\tconst LoginSchema = Yup.object().shape({\r\n\t\temail: Yup.string()\r\n\t\t\t.required(\"Required\")\r\n\t\t\t.email(\"Must be valid email\"),\r\n\t});\r\n\r\n\r\n\treturn (\r\n\t<Container fluid md=\"auto\" className=\"loginContainer\">\r\n\t\t<Formik \r\n\t\t\tvalidationSchema={LoginSchema}\r\n\t\t\tonSubmit= {(values, {resetForm}) => {\r\n\t\t\t\tAttemptLogin(setUser);\r\n\t\t\t}}\r\n\t\t\tinitialValues= {{\r\n\t\t\t\temail: '',\r\n\t\t\t\tpassword: '',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t{({\r\n\t\t\t\thandleSubmit,\r\n\t\t\t\thandleChange,\r\n\t\t\t\thandleBlur,\r\n\t\t\t\tvalues,\r\n\t\t\t\ttouched,\r\n\t\t\t\tisValid,\r\n\t\t\t\terrors\r\n\t\t\t}) => (\r\n\t      <Form className=\"loginForm\" \r\n\t      \t\t\tautoComplete=\"off\" \r\n\t      \t\t\tonSubmit={handleSubmit} \r\n\t      \t\t\tid=\"emailForm\">\r\n\r\n    \t\t\t<Row>\r\n    \t\t\t\t<img className=\"homeIcon\" src={icon}/>\r\n    \t\t\t</Row>\r\n\t      \t<Row>\r\n\t      \t\t<Col className=\"idCol\" xs={3}>\r\n\t\t\t        <Form.Control \r\n\t\t\t        \tid=\"email\"\r\n\t\t\t        \tname=\"email\"\r\n\t\t\t        \ttype=\"text\" \r\n\t\t\t        \tonChange={handleChange}\r\n\t\t\t        \tonBlur={handleBlur}\r\n\t\t\t        \tvalue={values.email}\r\n\t\t\t        \tisValid={!errors.email}\r\n\t\t\t        \tplaceholder=\"Email\"\r\n\t\t\t        \tsize=\"sm\"/>\r\n\t\t\t        \t{errors.email && <div>{errors.email}</div>}\r\n\t\t       \t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row>\r\n\t\t\t\t\t\t<Col className=\"idCol\" xs={3}>\r\n\t\t\t        <Form.Control \r\n\t\t\t        \tid=\"password\"\r\n\t\t\t        \tname=\"password\"\r\n\t\t\t        \ttype=\"password\" \r\n\t\t\t        \tonChange={handleChange}\r\n\t\t\t        \tonBlur={handleBlur}\r\n\t\t\t        \tvalue={values.password}\r\n\t\t\t        \tisValid={!errors.password}\r\n\t\t\t        \tonKeyDown={keyPress}\r\n\t\t\t        \tplaceholder=\"Password\"\r\n\t\t\t        \tsize=\"sm\"/>\r\n\t\t\t        \t{errors.password && <div>{errors.password}</div>}\r\n\t\t       \t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t\t<Row>\r\n\t\t       \t<Col>\r\n\t\t\t      \t<Button id=\"profile-button\"\r\n\t\t\t      \t\t\t\t\ttype=\"submit\" \r\n\t\t\t      \t\t\t\t\tclassName=\"button\"\r\n\t\t\t      \t\t\t\t\tsize=\"sm\">\r\n\t\t\t      \t\tLogin\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t      \t<Button id=\"profile-button\" \r\n\t\t\t      \t\t\t\t\ttype=\"button\" \r\n\t\t\t      \t\t\t\t\tclassName=\"button\"\r\n\t\t\t      \t\t\t\t\tonClick={() => {SignUp()}}\r\n\t\t\t      \t\t\t\t\tsize=\"sm\">\r\n\t\t\t      \t\tSign Up\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t      </Form>\r\n\r\n\t\t\t)}\r\n\t\t</Formik>\r\n\r\n\t</Container>\r\n\r\n\t);\r\n};","C:\\Users\\Kan\\OneDrive\\Documents\\Projects\\billsplit\\src\\index.js",[],{"ruleId":"106","severity":1,"message":"107","line":9,"column":31,"nodeType":"108","messageId":"109","endLine":9,"endColumn":37},{"ruleId":"110","severity":1,"message":"111","line":280,"column":22,"nodeType":"112","endLine":280,"endColumn":56},{"ruleId":"106","severity":1,"message":"113","line":4,"column":10,"nodeType":"108","messageId":"109","endLine":4,"endColumn":14},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"114","replacedBy":"118"},{"ruleId":"116","replacedBy":"119"},{"ruleId":"114","replacedBy":"120"},{"ruleId":"116","replacedBy":"121"},{"ruleId":"114","replacedBy":"122"},{"ruleId":"116","replacedBy":"123"},{"ruleId":"114","replacedBy":"124"},{"ruleId":"116","replacedBy":"125"},{"ruleId":"114","replacedBy":"126"},{"ruleId":"116","replacedBy":"127"},{"ruleId":"114","replacedBy":"128"},{"ruleId":"116","replacedBy":"129"},{"ruleId":"114","replacedBy":"130"},{"ruleId":"116","replacedBy":"131"},{"ruleId":"106","severity":1,"message":"107","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":16},{"ruleId":"110","severity":1,"message":"111","line":86,"column":9,"nodeType":"112","endLine":86,"endColumn":47},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","no-native-reassign",["132"],"no-negated-in-lhs",["133"],["132"],["133"],["132"],["133"],["132"],["133"],["132"],["133"],["132"],["133"],["132"],["133"],["132"],["133"],"no-global-assign","no-unsafe-negation"]